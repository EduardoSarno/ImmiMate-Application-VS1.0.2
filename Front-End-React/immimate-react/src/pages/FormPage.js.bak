import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import '../styles/FormPage.css';
// Remove direct imports that are causing issues

const FormPage = () => {
  const { currentUser } = useAuth();
  const navigate = useNavigate();
  
  // State for form data - load from localStorage if available
  const [formData, setFormData] = useState(() => {
    // Try to load saved form data from localStorage
    const savedFormData = localStorage.getItem('immigrationFormData');
    if (savedFormData) {
      try {
        // Parse the saved JSON data
        const parsedData = JSON.parse(savedFormData);
        console.log("Loaded saved form data from localStorage", parsedData);
        return parsedData;
      } catch (error) {
        console.error("Error parsing saved form data:", error);
        // Return default empty form if there was an error
        return {
          fullName: '',
          age: '',
          citizenship: '',
          residence: '',
          maritalStatus: '',
          educationLevel: '',
          eduInCanada: '',
          canadianEducationLevel: '',
          hasECA: '',
          tradesCertification: '',
          primaryLanguageTest: '',
          speaking: '',
          listening: '',
          reading: '',
          writing: '',
          secondaryLangTest: '',
          secondaryLanguageTest: '',
          secSpeaking: '',
          secListening: '',
          secReading: '',
          secWriting: '',
          canadianExp: '',
          nocCodeCanadian: '',
          foreignExp: '',
          nocCodeForeign: '',
          workInsideCanada: '',
          jobOffer: '',
          lmiaStatus: '',
          jobWage: '',
          jobOfferNocCode: '',
          weeklyHours: '',
          jobDetails: '',
          provNomination: '',
          provinceInterest: '',
          canadianRelatives: '',
          relativeRelationship: '',
          receivedITA: '',
          settlementFunds: '',
          preferredCity: '',
          preferredDestination: ''
        };
      }
    } else {
      // Return default empty form if no saved data
      return {
        fullName: '',
        age: '',
        citizenship: '',
        residence: '',
        maritalStatus: '',
        educationLevel: '',
        eduInCanada: '',
        canadianEducationLevel: '',
        hasECA: '',
        tradesCertification: '',
        primaryLanguageTest: '',
        speaking: '',
        listening: '',
        reading: '',
        writing: '',
        secondaryLangTest: '',
        secondaryLanguageTest: '',
        secSpeaking: '',
        secListening: '',
        secReading: '',
        secWriting: '',
        canadianExp: '',
        nocCodeCanadian: '',
        foreignExp: '',
        nocCodeForeign: '',
        workInsideCanada: '',
        jobOffer: '',
        lmiaStatus: '',
        jobWage: '',
        jobOfferNocCode: '',
        weeklyHours: '',
        jobDetails: '',
        provNomination: '',
        provinceInterest: '',
        canadianRelatives: '',
        relativeRelationship: '',
        receivedITA: '',
        settlementFunds: '',
        preferredCity: '',
        preferredDestination: ''
      };
    }
  });

  // State for open/closed sections
  const [openSections, setOpenSections] = useState({
    'personal-info': true,
    'education': false,
    'language': false,
    'secondary-language': false,
    'work-experience': false,
    'spouse': false,
    'job-offer': false,
    'provincial': false,
    'additional': false
  });

  // State for dropdown data with fallback values
  const [countries, setCountries] = useState([
    { id: "ca", name: "Canada" },
    { id: "us", name: "United States" },
    { id: "uk", name: "United Kingdom" },
    { id: "in", name: "India" },
    { id: "au", name: "Australia" }
  ]);
  
  const [cities, setCities] = useState([
    { id: "toronto", name: "Toronto", country_id: "ca" },
    { id: "vancouver", name: "Vancouver", country_id: "ca" },
    { id: "montreal", name: "Montreal", country_id: "ca" },
    { id: "new_york", name: "New York", country_id: "us" },
    { id: "london", name: "London", country_id: "uk" }
  ]);
  
  const [jobs, setJobs] = useState([
    { id: "software_developer", name: "Software Developer", noc: "21234" },
    { id: "doctor", name: "Medical Doctor", noc: "31102" },
    { id: "teacher", name: "Teacher", noc: "41200" },
    { id: "nurse", name: "Registered Nurse", noc: "31301" },
    { id: "accountant", name: "Accountant", noc: "11100" }
  ]);

  // Loading and submission states
  const [isLoading, setIsLoading] = useState(true);
  const [hasSubmittedProfile, setHasSubmittedProfile] = useState(false);
  const [formSubmitting, setFormSubmitting] = useState(false);
  const [formErrors, setFormErrors] = useState([]);
  const [profileData, setProfileData] = useState(null);

  // Toggle collapsible sections
  const toggleSection = (sectionId) => {
    setOpenSections((prev) => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };

  // Modified handleInputChange to save to localStorage and handle null elements safely
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    const updatedFormData = {
      ...formData,
      [name]: value,
    };
    
    setFormData(updatedFormData);
    
    // Save to localStorage
    try {
      localStorage.setItem('immigrationFormData', JSON.stringify(updatedFormData));
      console.log(`Saved field ${name} with value ${value} to localStorage`);
    } catch (error) {
      console.error("Error saving form data to localStorage:", error);
    }

    // Existing conditional logic with null checks
    if (name === 'maritalStatus') {
      const spouseSection = document.getElementById('spouseSection');
      if (spouseSection) {
        spouseSection.style.display = value === 'married' || value === 'common-law' ? 'block' : 'none';
      } else {
        console.log("Warning: Spouse section element not found in the DOM");
      }
    } else if (name === 'eduInCanada') {
      const canadianEduGroup = document.getElementById('canadianEducationLevelGroup');
      if (canadianEduGroup) {
        canadianEduGroup.style.display = value === 'yes' ? 'block' : 'none';
      } else {
        console.log("Warning: Canadian education group element not found in the DOM");
      }
    } else if (name === 'secondaryLangTest') {
      const secondaryLangDetails = document.getElementById('secondaryLangDetails');
      if (secondaryLangDetails) {
        secondaryLangDetails.style.display = value === 'yes' ? 'block' : 'none';
      } else {
        console.log("Warning: Secondary language details element not found in the DOM");
      }
    } else if (name === 'jobOffer') {
      const jobDetails = document.getElementById('jobOfferDetails');
      if (jobDetails) {
        jobDetails.style.display = value === 'yes' ? 'block' : 'none';
      } else {
        console.log("Warning: Job offer details element not found in the DOM");
      }
    } else if (name === 'canadianRelatives') {
      const relativeDetails = document.getElementById('relativeDetails');
      if (relativeDetails) {
        relativeDetails.style.display = value === 'yes' ? 'block' : 'none';
      } else {
        console.log("Warning: Relative details element not found in the DOM");
      }
    }

    // Update progress bar
    if (updateProgressBar) {
      updateProgressBar();
    }
  };

  // Calculate and update progress bar - wrapped in useCallback
  const updateProgressBar = useCallback(() => {
    // Count total fields and filled fields
    let totalFields = 0;
    let filledFields = 0;
    
    // Count basic required fields
    Object.keys(formData).forEach(key => {
      // Skip fields that are conditional
      if (
        (key.startsWith('partner') && formData.maritalStatus !== 'married' && formData.maritalStatus !== 'common-law') ||
        (key.startsWith('sec') && formData.secondaryLangTest !== 'yes') ||
        (key.startsWith('jobOffer') && formData.jobOffer !== 'yes') ||
        (key === 'relativeRelationship' && formData.canadianRelatives !== 'yes') ||
        (key === 'canadianEducationLevel' && formData.eduInCanada !== 'yes')
      ) {
        return;
      }
      
      totalFields++;
      if (formData[key]) {
        filledFields++;
      }
    });
    
    // Calculate percentage
    const percentage = Math.min(100, Math.round((filledFields / totalFields) * 100));
    
    // Update progress bar
    const progressBar = document.getElementById('progressBar');
    if (progressBar) {
      progressBar.style.width = `${percentage}%`;
    }
  }, [formData]); // Add formData as a dependency
  
  // Update progress bar on initial render and when form data changes
  useEffect(() => {
    if (formData) {
      updateProgressBar();
    }
  }, [formData, updateProgressBar]);

  // Updated to use fetch with public folder data
  useEffect(() => {
    const loadCountries = () => {
      try {
        console.log("Attempting to fetch countries data");
        // Try to fetch from public folder
        fetch('/Data/countries.json')
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error("Failed to load countries data");
          })
          .then(data => {
            console.log("Successfully loaded countries data", data);
            console.log("Sample country item:", data[0]); // Log the first item to see its structure
            setCountries(data);
          })
          .catch(error => {
            console.error("Error loading countries:", error);
            // Fallback data already set in state
          });
      } catch (error) {
        console.error("Error in countries loading function:", error);
        // Fallback data already set in state
      }
    };

    const loadCities = () => {
      try {
        console.log("Attempting to fetch cities data");
        // Try to fetch from public folder
        fetch('/Data/canadacities.json')
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error("Failed to load cities data");
          })
          .then(data => {
            console.log("Successfully loaded cities data", data);
            console.log("Sample city item:", data[0]); // Log the first item to see its structure
            setCities(data);
          })
          .catch(error => {
            console.error("Error loading cities:", error);
            // Fallback data already set in state
          });
      } catch (error) {
        console.error("Error in cities loading function:", error);
        // Fallback data already set in state
      }
    };

    const loadJobs = () => {
      try {
        console.log("Attempting to fetch jobs data");
        // Try to fetch from public folder
        fetch('/Data/jobs.json')
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error("Failed to load jobs data");
          })
          .then(data => {
            console.log("Successfully loaded jobs data", data);
            console.log("Sample job item:", data[0]); // Log the first item to see its structure
            setJobs(data);
          })
          .catch(error => {
            console.error("Error loading jobs:", error);
            // Fallback data already set in state
          });
      } catch (error) {
        console.error("Error in jobs loading function:", error);
        // Fallback data already set in state
      }
    };

    const checkExistingProfile = async () => {
      try {
        const token = localStorage.getItem('access_token');
        console.log("Checking for existing profile. Token:", token ? `${token.substring(0,15)}...` : 'None');
        
        if (!token) {
          setIsLoading(false);
          return;
        }
        
        // Check localStorage first
        const hasProfile = localStorage.getItem('has_submitted_profile') === 'true';
        if (hasProfile) {
          console.log("Found submission record in localStorage");
          setHasSubmittedProfile(true);
          setProfileData({
            profileId: localStorage.getItem('profile_id') || 'Unknown',
            createdAt: localStorage.getItem('profile_created_at') || new Date().toISOString(),
            applicantName: localStorage.getItem('applicant_name') || currentUser.email || ''
          });
          navigate('/dashboard');
          return;
        }
        
        // Otherwise, check the server
        const response = await fetch('http://localhost:8080/api/profiles/recent', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.status === 401) {
          console.log("Authentication failed. Redirecting to /login");
          navigate('/login');
          return;
        }
        
        if (!response.ok) {
          throw new Error(`Server responded with status ${response.status}`);
        }
        
        const data = await response.json();
        console.log("Profile check response:", data);
        
        if (data.profileExists) {
          // Mark as submitted
          setHasSubmittedProfile(true);
          setProfileData(data);
          localStorage.setItem('has_submitted_profile', 'true');
          localStorage.setItem('profile_created_at', data.createdAt);
          localStorage.setItem('profile_id', data.profileId);
          localStorage.setItem('applicant_name', data.applicantName);
          navigate('/dashboard');
        }
      } catch (error) {
        console.error("Error checking profile:", error);
      } finally {
        setIsLoading(false);
      }
    };

    // Load data
    loadCountries();
    loadCities();
    loadJobs();
    
    if (currentUser) {
      checkExistingProfile();
    }
  }, [currentUser, navigate]);

  // Validate form before submission
  const validateForm = () => {
    const newErrors = [];
    let isValid = true;

    // Define all required fields with their IDs and labels
    const requiredFields = [
      { id: 'fullName', label: 'Full Name' },
      { id: 'age', label: 'Age' },
      { id: 'citizenship', label: 'Country of Citizenship' },
      { id: 'residence', label: 'Country of Residence' },
      { id: 'educationLevel', label: 'Highest Level of Education' },
      { id: 'primaryLanguageTest', label: 'Primary Language Test' },
      { id: 'speaking', label: 'Speaking Score' },
      { id: 'listening', label: 'Listening Score' },
      { id: 'reading', label: 'Reading Score' },
      { id: 'writing', label: 'Writing Score' },
      { id: 'canadianExp', label: 'Canadian Work Experience' },
      { id: 'foreignExp', label: 'Foreign Work Experience' },
      { id: 'settlementFunds', label: 'Settlement Funds' },
      { id: 'preferredDestination', label: 'Preferred Destination' }
    ];

    // Check radio button groups separately to ensure at least one option is selected
    const radioGroups = [
      { name: 'eduInCanada', label: 'Education in Canada' },
      { name: 'hasECA', label: 'ECA Report' },
      { name: 'tradesCertification', label: 'Trades Certification' },
      { name: 'secondaryLangTest', label: 'Secondary Language Test' },
      { name: 'workInsideCanada', label: 'Working Inside Canada' },
      { name: 'jobOffer', label: 'Canadian Job Offer' },
      { name: 'provNomination', label: 'Provincial Nomination' },
      { name: 'canadianRelatives', label: 'Canadian Relatives' },
      { name: 'receivedITA', label: 'Received ITA' },
      { name: 'maritalStatus', label: 'Marital Status' }
    ];

    // Check each radio group
    radioGroups.forEach(group => {
      if (!formData[group.name]) {
        newErrors.push(`${group.label} is required.`);
        // Highlight the radio group container
        const container = document.querySelector(`[name="${group.name}"]`)?.closest('.form-group');
        if (container) {
          container.classList.add('error-field-animation');
          setTimeout(() => {
            container.classList.remove('error-field-animation');
          }, 1000);
        }
        isValid = false;
      }
    });

    // Check each regular required field
    requiredFields.forEach(field => {
      const element = document.getElementById(field.id);
      if (!element || !element.value) {
        newErrors.push(`${field.label} is required.`);
        element?.classList.add('error-field');  // highlight in red
        isValid = false;
      } else {
        element?.classList.remove('error-field'); // remove red border if previously added
      }
    });

    // Check conditional required fields - these only apply if their parent condition is met
    if (formData.eduInCanada === 'yes') {
      const element = document.getElementById('canadianEducationLevel');
      if (!element || !element.value) {
        newErrors.push('Canadian Education Level is required.');
        element?.classList.add('error-field');
        isValid = false;
      } else {
        element?.classList.remove('error-field');
      }
    }

    if (formData.secondaryLangTest === 'yes') {
      const secondaryFields = [
        { id: 'secondaryLanguageTest', label: 'Secondary Language Test' },
        { id: 'secSpeaking', label: 'Secondary Speaking Score' },
        { id: 'secListening', label: 'Secondary Listening Score' },
        { id: 'secReading', label: 'Secondary Reading Score' },
        { id: 'secWriting', label: 'Secondary Writing Score' }
      ];
      
      secondaryFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element || !element.value) {
          newErrors.push(`${field.label} is required.`);
          element?.classList.add('error-field');
          isValid = false;
        } else {
          element?.classList.remove('error-field');
        }
      });
    }

    if (formData.maritalStatus === 'married' || formData.maritalStatus === 'common-law') {
      const spouseFields = [
        { id: 'partnerEducation', label: 'Spouse Education Level' },
        { id: 'partnerLanguageTest', label: 'Spouse Language Test' },
        { id: 'partnerSpeaking', label: 'Spouse Speaking Score' },
        { id: 'partnerListening', label: 'Spouse Listening Score' },
        { id: 'partnerReading', label: 'Spouse Reading Score' },
        { id: 'partnerWriting', label: 'Spouse Writing Score' },
        { id: 'partnerCanadianExp', label: 'Spouse Canadian Experience' }
      ];
      
      spouseFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element || !element.value) {
          newErrors.push(`${field.label} is required.`);
          element?.classList.add('error-field');
          isValid = false;
        } else {
          element?.classList.remove('error-field');
        }
      });
    }

    if (formData.jobOffer === 'yes') {
      const jobOfferFields = [
        { id: 'lmiaStatus', label: 'LMIA Status' },
        { id: 'jobWage', label: 'Job Wage' },
        { id: 'jobOfferNocCode', label: 'Job NOC Code' },
        { id: 'weeklyHours', label: 'Weekly Hours' },
        { id: 'jobDetails', label: 'Job Details' }
      ];
      
      jobOfferFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element || !element.value) {
          newErrors.push(`${field.label} is required.`);
          element?.classList.add('error-field');
          isValid = false;
        } else {
          element?.classList.remove('error-field');
        }
      });
    }

    if (formData.canadianRelatives === 'yes') {
      const element = document.getElementById('relativeRelationship');
      if (!element || !element.value) {
        newErrors.push('Relative Relationship is required.');
        element?.classList.add('error-field');
        isValid = false;
      } else {
        element?.classList.remove('error-field');
      }
    }

    // Display errors in the form
    setFormErrors(newErrors);
    
    // If there are errors, scroll to the error display
    if (newErrors.length > 0) {
      const errorDisplay = document.getElementById('form-error-display');
      if (errorDisplay) {
        errorDisplay.style.display = 'block';
        errorDisplay.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }
    
    return isValid;
  };

  // Add a function to clear saved form data
  const clearSavedFormData = () => {
    localStorage.removeItem('immigrationFormData');
    setFormData({
      fullName: '',
      age: '',
      citizenship: '',
      residence: '',
      maritalStatus: '',
      educationLevel: '',
      eduInCanada: '',
      canadianEducationLevel: '',
      hasECA: '',
      tradesCertification: '',
      primaryLanguageTest: '',
      speaking: '',
      listening: '',
      reading: '',
      writing: '',
      secondaryLangTest: '',
      secondaryLanguageTest: '',
      secSpeaking: '',
      secListening: '',
      secReading: '',
      secWriting: '',
      canadianExp: '',
      nocCodeCanadian: '',
      foreignExp: '',
      nocCodeForeign: '',
      workInsideCanada: '',
      jobOffer: '',
      lmiaStatus: '',
      jobWage: '',
      jobOfferNocCode: '',
      weeklyHours: '',
      jobDetails: '',
      provNomination: '',
      provinceInterest: '',
      canadianRelatives: '',
      relativeRelationship: '',
      receivedITA: '',
      settlementFunds: '',
      preferredCity: '',
      preferredDestination: ''
    });
    console.log("Cleared saved form data");
  };

  // Add an effect to set up the conditional sections based on loaded data
  useEffect(() => {
    // Set up visibility of conditional sections based on loaded data
    if (formData.maritalStatus === 'married' || formData.maritalStatus === 'common-law') {
      const spouseSection = document.getElementById('spouseSection');
      if (spouseSection) spouseSection.style.display = 'block';
    }
    
    if (formData.eduInCanada === 'yes') {
      const canadianEduGroup = document.getElementById('canadianEducationLevelGroup');
      if (canadianEduGroup) canadianEduGroup.style.display = 'block';
    }
    
    if (formData.secondaryLangTest === 'yes') {
      const secondaryLangDetails = document.getElementById('secondaryLangDetails');
      if (secondaryLangDetails) secondaryLangDetails.style.display = 'block';
    }
    
    if (formData.jobOffer === 'yes') {
      const jobDetails = document.getElementById('jobOfferDetails');
      if (jobDetails) jobDetails.style.display = 'block';
    }
    
    if (formData.canadianRelatives === 'yes') {
      const relativeDetails = document.getElementById('relativeDetails');
      if (relativeDetails) relativeDetails.style.display = 'block';
    }
  }, [formData]);

  // Update handleSubmit to convert all data types properly
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      console.log("Form validation failed");
      return;
    }
    
    setFormSubmitting(true);
    
    try {
      // Get the token from localStorage
      const token = localStorage.getItem('access_token');
      
      if (!token) {
        console.error("No authentication token found");
        setFormErrors(["Authentication required. Please log in."]);
        setFormSubmitting(false);
        return;
      }
      
      // Get user ID if available
      const userId = localStorage.getItem('user_id');
      
      // Create a copy of the form data for conversion
      const convertedData = { ...formData };
      
      // Convert yes/no strings to boolean values for backend compatibility
      const booleanFields = [
        'eduInCanada', 'hasECA', 'tradesCertification', 'secondaryLangTest',
        'workInsideCanada', 'jobOffer', 'provNomination', 'canadianRelatives', 
        'receivedITA'
      ];
      
      booleanFields.forEach(field => {
        if (convertedData[field] === 'yes') {
          convertedData[field] = true;
        } else if (convertedData[field] === 'no') {
          convertedData[field] = false;
        }
      });

      // Convert lmiaStatus to boolean if it's a yes/no value
      if (convertedData.lmiaStatus === 'yes') {
        convertedData.lmiaStatus = true;
      } else if (convertedData.lmiaStatus === 'no') {
        convertedData.lmiaStatus = false;
      }
      
      // Convert numeric string fields to integers
      const integerFields = [
        'age', 'speaking', 'listening', 'reading', 'writing',
        'secSpeaking', 'secListening', 'secReading', 'secWriting',
        'canadianExp', 'foreignExp', 'nocCodeCanadian', 'settlementFunds',
        'partnerSpeaking', 'partnerListening', 'partnerReading', 'partnerWriting',
        'partnerCanadianExp', 'jobWage', 'weeklyHours'
      ];
      
      integerFields.forEach(field => {
        if (convertedData[field] && convertedData[field] !== '') {
          // Use parseInt for integer conversion and handle NaN
          const parsedValue = parseInt(convertedData[field], 10);
          convertedData[field] = isNaN(parsedValue) ? null : parsedValue;
        } else {
          // Set to null if empty for nullable integer fields
          convertedData[field] = null;
        }
      });
      
      // Map form field names to database column names where needed
      const mappedData = {
        // User information
        userId: userId || '',
        userEmail: localStorage.getItem('user_email') || '',
        
        // Personal information
        applicantName: convertedData.fullName,
        applicantAge: convertedData.age,
        applicantCitizenship: convertedData.citizenship,
        applicantResidence: convertedData.residence,
        applicantMaritalStatus: convertedData.maritalStatus,
        
        // Education
        applicantEducationLevel: convertedData.educationLevel,
        educationCompletedInCanada: convertedData.eduInCanada,
        canadianEducationLevel: convertedData.canadianEducationLevel || null,
        hasEducationalCredentialAssessment: convertedData.hasECA,
        tradesCertification: convertedData.tradesCertification,
        
        // Primary language
        primaryLanguageTestType: convertedData.primaryLanguageTest,
        primaryTestSpeakingScore: convertedData.speaking,
        primaryTestListeningScore: convertedData.listening,
        primaryTestReadingScore: convertedData.reading,
        primaryTestWritingScore: convertedData.writing,
        
        // Secondary language
        tookSecondaryLanguageTest: convertedData.secondaryLangTest,
        secondaryTestType: convertedData.secondaryLanguageTest || null,
        secondaryTestSpeakingScore: convertedData.secSpeaking,
        secondaryTestListeningScore: convertedData.secListening,
        secondaryTestReadingScore: convertedData.secReading,
        secondaryTestWritingScore: convertedData.secWriting,
        
        // Work experience
        canadianWorkExperienceYears: convertedData.canadianExp,
        nocCodeCanadian: convertedData.nocCodeCanadian,
        foreignWorkExperienceYears: convertedData.foreignExp,
        nocCodeForeign: convertedData.nocCodeForeign,
        workingInCanada: convertedData.workInsideCanada,
        
        // Spouse information
        partnerEducationLevel: convertedData.partnerEducation || null,
        partnerLanguageTestType: convertedData.partnerLanguageTest || null,
        partnerTestSpeakingScore: convertedData.partnerSpeaking,
        partnerTestListeningScore: convertedData.partnerListening,
        partnerTestReadingScore: convertedData.partnerReading,
        partnerTestWritingScore: convertedData.partnerWriting,
        partnerCanadianWorkExperienceYears: convertedData.partnerCanadianExp,
        
        // Job offer
        hasJobOffer: convertedData.jobOffer,
        isJobOfferLmiaApproved: convertedData.lmiaStatus,
        jobOfferWageCad: convertedData.jobWage,
        jobOfferNocCode: convertedData.jobOfferNocCode || null,
        jobOfferWeeklyHours: convertedData.weeklyHours,
        
        // Provincial nomination and connections
        hasProvincialNomination: convertedData.provNomination,
        provinceOfInterest: convertedData.provinceInterest,
        hasCanadianRelatives: convertedData.canadianRelatives,
        relationshipWithCanadianRelative: convertedData.relativeRelationship || null,
        
        // Additional information
        receivedInvitationToApply: convertedData.receivedITA,
        // Fix field name casing to match backend expectation
        settlementFundsCAD: convertedData.settlementFunds || 0, // Ensure a default value
        preferredCity: convertedData.preferredCity,
        preferredDestinationProvince: convertedData.preferredDestination,
        
        // Store the original form data as JSON for reference
        jsonPayload: JSON.stringify(formData)
      };
      
      // Add debug logging before submitting
      console.log("Mapped data for submission:", mappedData);
      
      // Log the actual JSON being sent for debugging
      const jsonBody = JSON.stringify(mappedData);
      console.log("JSON payload:", jsonBody);
      console.log("JSON payload length:", jsonBody.length);
      
      try {
        const response = await fetch('http://localhost:8080/api/profiles', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: jsonBody
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error("Error response from server:", errorData);
          
          // Extract and display validation errors if available
          if (errorData.errors && Array.isArray(errorData.errors)) {
            setFormErrors(errorData.errors);
          } else if (errorData.message) {
            // Extract detailed error from the message when possible
            if (errorData.message.includes("Cannot deserialize")) {
              const fieldMatch = errorData.message.match(/property\s+"([^"]+)"/);
              if (fieldMatch && fieldMatch[1]) {
                setFormErrors([`Data format issue with field: ${fieldMatch[1]}. Please check your input and try again.`]);
              } else {
                setFormErrors(["There is a data format issue. Please check your form inputs and try again."]);
              }
            } else {
              setFormErrors([errorData.message]);
            }
          } else {
            setFormErrors(["Failed to submit profile. Please check your form inputs and try again."]);
          }
          
          throw new Error(errorData.message || "Failed to submit profile");
        }
        
        const result = await response.json();
        console.log("Form submission successful:", result);
        
        // Clear saved form data on successful submission
        clearSavedFormData();
        
        // Navigate to dashboard or success page
        setFormSubmitting(false);
        setHasSubmittedProfile(true);
        setProfileData(result);
        localStorage.setItem('has_submitted_profile', 'true');
        localStorage.setItem('profile_created_at', new Date().toISOString());
        localStorage.setItem('profile_id', result.profileId || 'Unknown');
        localStorage.setItem('applicant_name', formData.fullName || currentUser?.email || '');
        
        // Show success message before redirecting
        alert("Your profile has been successfully submitted! Redirecting to dashboard...");
        
        setTimeout(() => {
          navigate('/dashboard');
        }, 2000);
        
      } catch (error) {
        console.error("Error submitting form:", error);
        setFormErrors([error.message || "Failed to submit profile. Please try again."]);
        setFormSubmitting(false);
      }
    } catch (error) {
      console.error("Error submitting form:", error);
      setFormErrors([error.message || "Failed to submit profile. Please try again."]);
      setFormSubmitting(false);
    }
  };

  // If user is not logged in, show countdown and then redirect
  useEffect(() => {
    if (!currentUser && !isLoading) {
      let count = 5;
      const counter = setInterval(() => {
        count--;
        const el = document.getElementById('countdown');
        if (el) el.textContent = count.toString();
        if (count <= 0) {
          clearInterval(counter);
          navigate('/login');
        }
      }, 1000);
    }
  }, [currentUser, isLoading, navigate]);

  // Loading indicator
  if (isLoading) {
    return (
      <>
        <Navbar />
        <div className="page-container">
          <h1>Loading...</h1>
        </div>
        <Footer />
      </>
    );
  }

  // If user has already submitted
  if (hasSubmittedProfile && profileData) {
    return (
      <>
        <Navbar />
        <div className="page-container">
          <div id="profile-notification" className="notification">
            <h3>Your Application Has Been Submitted</h3>
            <p>You've already submitted a profile on {new Date(profileData.createdAt).toLocaleDateString()}.</p>
            <p>Application ID: {profileData.profileId}</p>
            <p>Name: {profileData.applicantName}</p>
            <p>If you need to make changes, please contact support.</p>
            <button 
              onClick={() => navigate('/')}
              className="btn-secondary"
            >
              Return to Home
            </button>
          </div>
        </div>
        <Footer />
      </>
    );
  }

  // If user is not logged in
  if (!currentUser) {
    return (
      <>
        <Navbar />
        <div className="page-container">
          <div id="auth-notification" className="notification">
            <h3>Authentication Required</h3>
            <p>You need to be logged in to access this page.</p>
            <p>You will be redirected to the login page in <span id="countdown">5</span> seconds...</p>
            <button onClick={() => navigate('/login')} className="btn-primary">
              Login Now
            </button>
            <button onClick={() => navigate('/signup')} className="btn-secondary">
              Sign Up
            </button>
          </div>
        </div>
        <Footer />
      </>
    );
  }

  // Fix rendering for country dropdown
  const renderCountryOptions = () => {
    if (!countries || !Array.isArray(countries)) {
      return <option value="">Loading countries...</option>;
    }
    
    return [
      <option key="default" value="">Select...</option>,
      ...countries.map((country, index) => {
        // Use the exact 'Countries' property from the data
        const countryName = country.Countries || "Unknown Country";
        
        return (
          <option key={`country-${index}-${countryName}`} value={countryName}>
            {countryName}
          </option>
        );
      })
    ];
  };

  // Fix rendering for city dropdown
  const renderCityOptions = () => {
    if (!cities || !Array.isArray(cities)) {
      return <option value="">Loading cities...</option>;
    }
    
    // Filter cities by selected country (province) if applicable
    let filteredCities = cities;
    if (formData.citizenship) {
      filteredCities = cities.filter(city => {
        // Use the 'Provinces' property for filtering if needed
        return !city.Provinces || city.Provinces === formData.citizenship;
      });
    }
    
    return [
      <option key="default" value="">Select...</option>,
      ...filteredCities.map((city, index) => {
        // Use the exact 'City' property from the data
        const cityName = city.City || "Unknown City";
        
        return (
          <option key={`city-${index}-${cityName}`} value={cityName}>
            {cityName}
          </option>
        );
      })
    ];
  };

  // Fix rendering for job dropdown
  const renderJobOptions = () => {
    if (!jobs || !Array.isArray(jobs)) {
      return <option value="">Loading jobs...</option>;
    }
    
    return [
      <option key="default" value="">Select occupation...</option>,
      ...jobs.map((job, index) => {
        // Use the exact 'NOC' and 'Job Title' properties from the data
        const noc = job.NOC || "No NOC";
        const title = job["Job Title"] || "Unknown Job";
        
        return (
          <option key={`job-${index}-${noc}`} value={noc}>
            {title} ({noc})
          </option>
        );
      })
    ];
  };

  return (
    <div className="form-page">
      <Navbar />
      
      <div className="page-container">
        <div className="form-container">
          <h1>Immigration Eligibility Form</h1>
          <p className="form-intro">
            Please fill out all the required fields below to calculate your eligibility.
            If you see any <span className="highlight">highlighted text</span>, it indicates
            extra important information.
          </p>

          <div className="required-explanation">
            <span>*</span> indicates a required field
          </div>

          <form id="eligibilityForm" onSubmit={handleSubmit}>
            {/* PERSONAL INFO SECTION */}
            <div className="collapsible-section" id="section-personal-info">
              <button
                type="button"
                className={`section-header ${openSections['personal-info'] ? 'active' : ''}`}
                onClick={() => toggleSection('personal-info')}
              >
                Personal Information <span className="chevron">{openSections['personal-info'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['personal-info'] ? 'block' : 'none' }}>
                {/* Full Name */}
                <div className="form-group">
                  <label htmlFor="fullName" className="required-field">
                    Full Name:
                    <span className="tooltip" data-tooltip="Enter your full legal name.">?</span>
                  </label>
                  <input
                    type="text"
                    id="fullName"
                    name="fullName"
                    placeholder="Your full name"
                    value={formData.fullName}
                    onChange={handleInputChange}
                    required
                  />
                </div>

                {/* Age */}
                <div className="form-group">
                  <label htmlFor="age" className="required-field">Age:</label>
                  <input
                    type="number"
                    id="age"
                    name="age"
                    placeholder="Your age"
                    min="16"
                    value={formData.age}
                    onChange={handleInputChange}
                    required
                  />
                </div>

                {/* Citizenship */}
                <div className="form-group">
                  <label htmlFor="citizenship" className="required-field">
                    Country of Citizenship
                    <span className="highlight">(Search or scroll)</span>
                  </label>
                  <select
                    id="citizenship"
                    name="citizenship"
                    value={formData.citizenship}
                    onChange={handleInputChange}
                    required
                  >
                    {renderCountryOptions()}
                  </select>
                </div>

                {/* Residence */}
                <div className="form-group">
                  <label htmlFor="residence" className="required-field">Country of Residence:</label>
                  <select
                    id="residence"
                    name="residence"
                    value={formData.residence}
                    onChange={handleInputChange}
                    required
                  >
                    {renderCountryOptions()}
                  </select>
                </div>

                {/* Marital Status */}
                <div className="form-group">
                  <label className="required-field">Marital Status:</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="maritalSingle"
                      name="maritalStatus"
                      value="single"
                      checked={formData.maritalStatus === 'single'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="maritalSingle">Single</label>

                    <input
                      type="radio"
                      id="maritalMarried"
                      name="maritalStatus"
                      value="married"
                      checked={formData.maritalStatus === 'married'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="maritalMarried">Married</label>

                    <input
                      type="radio"
                      id="maritalCommon"
                      name="maritalStatus"
                      value="common-law"
                      checked={formData.maritalStatus === 'common-law'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="maritalCommon">Common-Law</label>
                  </div>
                </div>
              </div>
            </div>

            {/* EDUCATION SECTION */}
            <div
              className="collapsible-section"
              id="section-education"
              data-section-name="Education"
              style={{ backgroundColor: '#1ac0ff' }}
            >
              <button
                type="button"
                className={`section-header ${openSections['education'] ? 'active' : ''}`}
                onClick={() => toggleSection('education')}
              >
                Education <span className="chevron">{openSections['education'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['education'] ? 'block' : 'none' }}>
                <p>
                  <strong>Instructions (from Government of Canada):</strong><br />
                  Enter the highest level of education for which you:<br />
                  • earned a <span className="highlight">Canadian degree</span>, diploma or certificate,
                  <em>or</em><br />
                  • had an <span className="highlight">Educational Credential Assessment (ECA)</span> if you did your
                  study outside Canada.<br />
                  (ECAs must be from an approved agency, in the last five years.)
                </p>
                
                {/* Highest Level */}
                <div className="form-group">
                  <label htmlFor="educationLevel" className="required-field">Highest Level of Education:</label>
                  <select
                    id="educationLevel"
                    name="educationLevel"
                    value={formData.educationLevel}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="none-or-less-than-secondary">None, or less than secondary (high school)</option>
                    <option value="secondary-diploma">Secondary diploma (high school graduation)</option>
                    <option value="one-year-program">One-year program at a university, college, trade or technical school</option>
                    <option value="two-year-program">Two-year program at a university, college, trade or technical school</option>
                    <option value="bachelors-degree">Bachelor's degree (3+ year program)</option>
                    <option value="two-or-more-certificates">Two or more certificates/diplomas/degrees (one 3+ years)</option>
                    <option value="masters">Master's degree, or professional degree (licensed profession)</option>
                    <option value="doctoral">Doctoral level university degree (PhD)</option>
                  </select>
                </div>

                {/* Education in Canada */}
                <div className="form-group">
                  <label className="required-field">Was your education completed in Canada?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="eduYes"
                      name="eduInCanada"
                      value="yes"
                      checked={formData.eduInCanada === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="eduYes">Yes</label>

                    <input
                      type="radio"
                      id="eduNo"
                      name="eduInCanada"
                      value="no"
                      checked={formData.eduInCanada === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="eduNo">No</label>
                  </div>
                </div>

                {/* If Canadian Education selected */}
                {formData.eduInCanada === 'yes' && (
                  <div className="form-group" id="canadianEducationLevelGroup">
                    <label htmlFor="canadianEducationLevel" className="required-field">
                      If yes, choose the best answer to describe this Canadian credential:
                    </label>
                    <select
                      id="canadianEducationLevel"
                      name="canadianEducationLevel"
                      value={formData.canadianEducationLevel}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="secondary-or-less">Secondary (high school) or less</option>
                      <option value="one-or-two-year-diploma">One- or two-year diploma or certificate</option>
                      <option value="degree-3-plus-years">Degree/diploma 3+ years, or Master's/PhD</option>
                    </select>
                    <small>
                      Distance learning counts for education points, but not always for bonus points.
                    </small>
                  </div>
                )}

                {/* ECA */}
                <div className="form-group">
                  <label className="required-field">
                    Do you have an Educational Credential Assessment (ECA) report?
                    <span className="tooltip" data-tooltip="An ECA is needed if your education was outside Canada.">?</span>
                  </label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="hasECAYes"
                      name="hasECA"
                      value="yes"
                      checked={formData.hasECA === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="hasECAYes">Yes</label>

                    <input
                      type="radio"
                      id="hasECANo"
                      name="hasECA"
                      value="no"
                      checked={formData.hasECA === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="hasECANo">No</label>
                  </div>
                </div>

                {/* Trades Certification */}
                <div className="form-group">
                  <label className="required-field">Do you have a trades certification?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="tradesYes"
                      name="tradesCertification"
                      value="yes"
                      checked={formData.tradesCertification === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="tradesYes">Yes</label>

                    <input
                      type="radio"
                      id="tradesNo"
                      name="tradesCertification"
                      value="no"
                      checked={formData.tradesCertification === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="tradesNo">No</label>
                  </div>
                </div>
              </div>
            </div>

            {/* LANGUAGE PROFICIENCY SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['language'] ? 'active' : ''}`}
                onClick={() => toggleSection('language')}
              >
                Language Proficiency <span className="chevron">{openSections['language'] ? '▲' : '▼'}</span>
              </button>
              
              <div className="section-content" style={{ display: openSections['language'] ? 'block' : 'none' }}>
                <p>
                  <strong>Instructions (from Government of Canada):</strong><br />
                  • Canada's official languages are <span className="highlight">English</span> and <span className="highlight">French</span>.<br />
                  • You must submit language test results (less than 2 years old), even if English or French is your first language.
                </p>

                {/* Primary Language Test */}
                <div className="form-group">
                  <label htmlFor="primaryLanguageTest" className="required-field">
                    Which test did you take for your <strong>first</strong> official language?
                  </label>
                  <select
                    id="primaryLanguageTest"
                    name="primaryLanguageTest"
                    value={formData.primaryLanguageTest}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="CELPIP">CELPIP-G</option>
                    <option value="IELTS">IELTS</option>
                    <option value="PTE">PTE Core</option>
                    <option value="TEF">TEF Canada</option>
                    <option value="TCF">TCF Canada</option>
                  </select>
                </div>

                {/* Speaking */}
                <div className="form-group">
                  <label htmlFor="speaking" className="required-field">Speaking (CLB):</label>
                  <select
                    id="speaking"
                    name="speaking"
                    value={formData.speaking}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="10">CLB 10 - 12</option>
                    <option value="9">CLB 9</option>
                    <option value="8">CLB 8</option>
                    <option value="7">CLB 7</option>
                    <option value="6">CLB 6</option>
                    <option value="5">CLB 5</option>
                    <option value="4">CLB 4</option>
                    <option value="3">CLB 0 - 3</option>
                  </select>
                </div>

                {/* Listening */}
                <div className="form-group">
                  <label htmlFor="listening" className="required-field">Listening (CLB):</label>
                  <select
                    id="listening"
                    name="listening"
                    value={formData.listening}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="10">CLB 10 - 12</option>
                    <option value="9">CLB 9</option>
                    <option value="8">CLB 8</option>
                    <option value="7">CLB 7</option>
                    <option value="6">CLB 6</option>
                    <option value="5">CLB 5</option>
                    <option value="4">CLB 4</option>
                    <option value="3">CLB 0 - 3</option>
                  </select>
                </div>

                {/* Reading */}
                <div className="form-group">
                  <label htmlFor="reading" className="required-field">Reading (CLB):</label>
                  <select
                    id="reading"
                    name="reading"
                    value={formData.reading}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="10">CLB 10 - 12</option>
                    <option value="9">CLB 9</option>
                    <option value="8">CLB 8</option>
                    <option value="7">CLB 7</option>
                    <option value="6">CLB 6</option>
                    <option value="5">CLB 5</option>
                    <option value="4">CLB 4</option>
                    <option value="3">CLB 0 - 3</option>
                  </select>
                </div>

                {/* Writing */}
                <div className="form-group">
                  <label htmlFor="writing" className="required-field">Writing (CLB):</label>
                  <select
                    id="writing"
                    name="writing"
                    value={formData.writing}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="10">CLB 10 - 12</option>
                    <option value="9">CLB 9</option>
                    <option value="8">CLB 8</option>
                    <option value="7">CLB 7</option>
                    <option value="6">CLB 6</option>
                    <option value="5">CLB 5</option>
                    <option value="4">CLB 4</option>
                    <option value="3">CLB 0 - 3</option>
                  </select>
                </div>
              </div>
            </div>

            {/* SECONDARY LANGUAGE SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['secondary-language'] ? 'active' : ''}`}
                onClick={() => toggleSection('secondary-language')}
              >
                Secondary Language Proficiency <span className="chevron">{openSections['secondary-language'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['secondary-language'] ? 'block' : 'none' }}>
                <p><strong>Did you take a second official language test?</strong> (Results must be less than 2 years old.)</p>
                <div className="pill-radio-group">
                  <input
                    type="radio"
                    id="secLangYes"
                    name="secondaryLangTest"
                    value="yes"
                    checked={formData.secondaryLangTest === 'yes'}
                    onChange={handleInputChange}
                    required
                  />
                  <label htmlFor="secLangYes">Yes</label>

                  <input
                    type="radio"
                    id="secLangNo"
                    name="secondaryLangTest"
                    value="no"
                    checked={formData.secondaryLangTest === 'no'}
                    onChange={handleInputChange}
                  />
                  <label htmlFor="secLangNo">No</label>
                </div>

                {formData.secondaryLangTest === 'yes' && (
                  <>
                    <div className="form-group">
                      <label htmlFor="secondaryLanguageTest" className="required-field">
                        Which test for your second official language?
                      </label>
                      <select
                        id="secondaryLanguageTest"
                        name="secondaryLanguageTest"
                        value={formData.secondaryLanguageTest}
                        onChange={handleInputChange}
                      >
                        <option value="">Select...</option>
                        <option value="CELPIP">CELPIP-G</option>
                        <option value="IELTS">IELTS</option>
                        <option value="PTE">PTE Core</option>
                        <option value="TEF">TEF Canada</option>
                        <option value="TCF">TCF Canada</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="secSpeaking" className="required-field">Speaking (CLB):</label>
                      <select
                        id="secSpeaking"
                        name="secSpeaking"
                        value={formData.secSpeaking}
                        onChange={handleInputChange}
                      >
                        <option value="">Select...</option>
                        <option value="10-12">CLB 10 - 12</option>
                        <option value="9">CLB 9</option>
                        <option value="8">CLB 8</option>
                        <option value="7">CLB 7</option>
                        <option value="6">CLB 6</option>
                        <option value="5">CLB 5</option>
                        <option value="4">CLB 4</option>
                        <option value="3">CLB 0 - 3</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="secListening" className="required-field">Listening (CLB):</label>
                      <select
                        id="secListening"
                        name="secListening"
                        value={formData.secListening}
                        onChange={handleInputChange}
                      >
                        <option value="">Select...</option>
                        <option value="10-12">CLB 10 - 12</option>
                        <option value="9">CLB 9</option>
                        <option value="8">CLB 8</option>
                        <option value="7">CLB 7</option>
                        <option value="6">CLB 6</option>
                        <option value="5">CLB 5</option>
                        <option value="4">CLB 4</option>
                        <option value="3">CLB 0 - 3</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="secReading" className="required-field">Reading (CLB):</label>
                      <select
                        id="secReading"
                        name="secReading"
                        value={formData.secReading}
                        onChange={handleInputChange}
                      >
                        <option value="">Select...</option>
                        <option value="10">CLB 10 - 12</option>
                        <option value="9">CLB 9</option>
                        <option value="8">CLB 8</option>
                        <option value="7">CLB 7</option>
                        <option value="6">CLB 6</option>
                        <option value="5">CLB 5</option>
                        <option value="4">CLB 4</option>
                        <option value="3">CLB 0 - 3</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="secWriting" className="required-field">Writing (CLB):</label>
                      <select
                        id="secWriting"
                        name="secWriting"
                        value={formData.secWriting}
                        onChange={handleInputChange}
                      >
                        <option value="">Select...</option>
                        <option value="10-12">CLB 10 - 12</option>
                        <option value="9">CLB 9</option>
                        <option value="8">CLB 8</option>
                        <option value="7">CLB 7</option>
                        <option value="6">CLB 6</option>
                        <option value="5">CLB 5</option>
                        <option value="4">CLB 4</option>
                        <option value="3">CLB 0 - 3</option>
                      </select>
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* WORK EXPERIENCE SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['work-experience'] ? 'active' : ''}`}
                onClick={() => toggleSection('work-experience')}
              >
                Work Experience <span className="chevron">{openSections['work-experience'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['work-experience'] ? 'block' : 'none' }}>
                <p><strong>Instructions (based on IRCC):</strong></p>
                <ul>
                  <li>In the last 10 years, how many years of <em>skilled</em> work have you done in Canada?</li>
                  <li>Must be paid, full-time (or equal part-time), TEER 0–3.</li>
                  <li>Foreign work must also be skilled (NOC TEER 0–3).</li>
                </ul>

                <div className="form-group">
                  <label htmlFor="canadianExp" className="required-field">Canadian Work Experience (years):</label>
                  <select
                    id="canadianExp"
                    name="canadianExp"
                    value={formData.canadianExp}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="none-or-smaller than 1">None or &lt;1 year</option>
                    <option value="1">1 year</option>
                    <option value="2">2 years</option>
                    <option value="3">3 years</option>
                    <option value="4">4 years</option>
                    <option value="5+">5 years or more</option>
                  </select>
                </div>
                <div className="form-group">
                  <label htmlFor="nocCodeCanadian" className="required-field">NOC Code for Canadian Work Experience:</label>
                  <select
                    id="nocCodeCanadian"
                    name="nocCodeCanadian"
                    value={formData.nocCodeCanadian}
                    onChange={handleInputChange}
                  >
                    {renderJobOptions()}
                  </select>
                </div>

                <div className="form-group">
                  <label htmlFor="foreignExp" className="required-field">Foreign Work Experience (last 10 years):</label>
                  <select
                    id="foreignExp"
                    name="foreignExp"
                    value={formData.foreignExp}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="1">None or &lt;1 year</option>
                    <option value="1">1 year</option>
                    <option value="2">2 years</option>
                    <option value="3">3 years or more</option>
                  </select>
                </div>
                <div className="form-group">
                  <label htmlFor="nocCodeForeign" className="required-field">NOC Code for Foreign Work Experience:</label>
                  <select
                    id="nocCodeForeign"
                    name="nocCodeForeign"
                    value={formData.nocCodeForeign}
                    onChange={handleInputChange}
                  >
                    {renderJobOptions()}
                  </select>
                </div>

                <div className="form-group">
                  <label className="required-field">Are you currently working inside Canada?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="insideCanadaYes"
                      name="workInsideCanada"
                      value="yes"
                      checked={formData.workInsideCanada === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="insideCanadaYes">Yes</label>

                    <input
                      type="radio"
                      id="insideCanadaNo"
                      name="workInsideCanada"
                      value="no"
                      checked={formData.workInsideCanada === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="insideCanadaNo">No</label>
                  </div>
                </div>
              </div>
            </div>

            {/* SPOUSE/COMMON-LAW SECTION */}
            {(formData.maritalStatus === 'married' || formData.maritalStatus === 'common-law') && (
              <div className="collapsible-section" id="spouseSection">
                <button
                  type="button"
                  className={`section-header ${openSections['spouse'] ? 'active' : ''}`}
                  onClick={() => toggleSection('spouse')}
                >
                  Spouse / Common-Law Partner <span className="chevron">{openSections['spouse'] ? '▲' : '▼'}</span>
                </button>

                <div className="section-content" style={{ display: openSections['spouse'] ? 'block' : 'none' }}>
                  <p>Please complete this section only if you are married or have a common-law partner.</p>

                  <div className="form-group">
                    <label htmlFor="partnerEducation" className="required-field">Spouse/Partner's Highest Education Level:</label>
                    <select
                      id="partnerEducation"
                      name="partnerEducation"
                      value={formData.partnerEducation}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="none-or-less-than-secondary">None or less than high school</option>
                      <option value="secondary-diploma">High school diploma</option>
                      <option value="one-year-program">One-year program</option>
                      <option value="two-year-program">Two-year program</option>
                      <option value="bachelors-degree">Bachelor's degree (3+ yrs)</option>
                      <option value="two-or-more-certificates">Two+ credentials</option>
                      <option value="masters">Master's or professional degree</option>
                      <option value="doctoral">PhD</option>
                    </select>
                  </div>

                  <div className="form-group">
                    <label htmlFor="partnerLanguageTest" className="required-field">Spouse/Partner's Language Test:</label>
                    <select
                      id="partnerLanguageTest"
                      name="partnerLanguageTest"
                      value={formData.partnerLanguageTest}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="CELPIP">CELPIP-G</option>
                      <option value="IELTS">IELTS</option>
                      <option value="PTE">PTE Core</option>
                      <option value="TEF">TEF Canada</option>
                      <option value="TCF">TCF Canada</option>
                    </select>
                  </div>

                  {/* Spouse Language Scores */}
                  <div className="form-group">
                    <label htmlFor="partnerSpeaking" className="required-field">Speaking (CLB):</label>
                    <select
                      id="partnerSpeaking"
                      name="partnerSpeaking"
                      value={formData.partnerSpeaking}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="10-12">CLB 10 - 12</option>
                      <option value="9">CLB 9</option>
                      <option value="8">CLB 8</option>
                      <option value="7">CLB 7</option>
                      <option value="6">CLB 6</option>
                      <option value="5">CLB 5</option>
                      <option value="4">CLB 4</option>
                      <option value="0-3">CLB 0 - 3</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label htmlFor="partnerListening" className="required-field">Listening (CLB):</label>
                    <select
                      id="partnerListening"
                      name="partnerListening"
                      value={formData.partnerListening}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="10-12">CLB 10 - 12</option>
                      <option value="9">CLB 9</option>
                      <option value="8">CLB 8</option>
                      <option value="7">CLB 7</option>
                      <option value="6">CLB 6</option>
                      <option value="5">CLB 5</option>
                      <option value="4">CLB 4</option>
                      <option value="0-3">CLB 0 - 3</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label htmlFor="partnerReading" className="required-field">Reading (CLB):</label>
                    <select
                      id="partnerReading"
                      name="partnerReading"
                      value={formData.partnerReading}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="10-12">CLB 10 - 12</option>
                      <option value="9">CLB 9</option>
                      <option value="8">CLB 8</option>
                      <option value="7">CLB 7</option>
                      <option value="6">CLB 6</option>
                      <option value="5">CLB 5</option>
                      <option value="4">CLB 4</option>
                      <option value="0-3">CLB 0 - 3</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label htmlFor="partnerWriting" className="required-field">Writing (CLB):</label>
                    <select
                      id="partnerWriting"
                      name="partnerWriting"
                      value={formData.partnerWriting}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="10-12">CLB 10 - 12</option>
                      <option value="9">CLB 9</option>
                      <option value="8">CLB 8</option>
                      <option value="7">CLB 7</option>
                      <option value="6">CLB 6</option>
                      <option value="5">CLB 5</option>
                      <option value="4">CLB 4</option>
                      <option value="0-3">CLB 0 - 3</option>
                    </select>
                  </div>

                  {/* Spouse Canadian Work Experience */}
                  <div className="form-group">
                    <label htmlFor="partnerCanadianExp" className="required-field">Spouse/Partner's Canadian Work Experience:</label>
                    <select
                      id="partnerCanadianExp"
                      name="partnerCanadianExp"
                      value={formData.partnerCanadianExp}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="0">None or less than 1 year</option>
                      <option value="1">1 year</option>
                      <option value="2">2 years</option>
                      <option value="3">3 years</option>
                      <option value="4">4 years</option>
                      <option value="5">5 years or more</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {/* JOB OFFER SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['job-offer'] ? 'active' : ''}`}
                onClick={() => toggleSection('job-offer')}
              >
                Job Offer & Arranged Employment <span className="chevron">{openSections['job-offer'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['job-offer'] ? 'block' : 'none' }}>
                <p>A valid Canadian job offer must be full-time, TEER 0–3, LMIA-supported (if needed), at least 1 year from becoming PR.</p>
                
                <div className="form-group">
                  <label className="required-field">Do you have a valid Canadian job offer?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="jobOfferYes"
                      name="jobOffer"
                      value="yes"
                      checked={formData.jobOffer === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="jobOfferYes">Yes</label>

                    <input
                      type="radio"
                      id="jobOfferNo"
                      name="jobOffer"
                      value="no"
                      checked={formData.jobOffer === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="jobOfferNo">No</label>
                  </div>
                </div>

                {formData.jobOffer === 'yes' && (
                  <>
                    <div className="form-group">
                      <label htmlFor="lmiaStatus" className="required-field">Is the job offer LMIA-approved?</label>
                      <select
                        id="lmiaStatus"
                        name="lmiaStatus"
                        value={formData.lmiaStatus}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select...</option>
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="jobWage" className="required-field">Job Offer Wage (CAD per hour):</label>
                      <input
                        type="number"
                        id="jobWage"
                        name="jobWage"
                        placeholder="e.g., 35"
                        value={formData.jobWage}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="jobOfferNocCode" className="required-field">Job Offer NOC Code:</label>
                      <select
                        id="jobOfferNocCode"
                        name="jobOfferNocCode"
                        value={formData.jobOfferNocCode}
                        onChange={handleInputChange}
                        required
                      >
                        {renderJobOptions()}
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="weeklyHours" className="required-field">Weekly Work Hours:</label>
                      <select
                        id="weeklyHours"
                        name="weeklyHours"
                        value={formData.weeklyHours}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select...</option>
                        <option value="casual">Casual (~under 15 hrs/week)</option>
                        <option value="part-time">Part-time (15-30 hrs/week)</option>
                        <option value="full-time">Full-time (30+ hrs/week)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="jobDetails" className="required-field">Brief Job Details/Description:</label>
                      <textarea
                        id="jobDetails"
                        name="jobDetails"
                        placeholder="Provide details of your job offer"
                        rows="3"
                        value={formData.jobDetails}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* PROVINCIAL NOMINATION & CONNECTIONS SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['provincial'] ? 'active' : ''}`}
                onClick={() => toggleSection('provincial')}
              >
                Provincial Nomination & Connections <span className="chevron">{openSections['provincial'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['provincial'] ? 'block' : 'none' }}>
                <div className="form-group">
                  <label className="required-field">Do you have a Provincial Nomination?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="provYes"
                      name="provNomination"
                      value="yes"
                      checked={formData.provNomination === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="provYes">Yes</label>

                    <input
                      type="radio"
                      id="provNo"
                      name="provNomination"
                      value="no"
                      checked={formData.provNomination === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="provNo">No</label>
                  </div>
                </div>

                <div className="form-group">
                  <label htmlFor="provinceInterest" className="required-field">Province or Territory of Interest:</label>
                  <select
                    id="provinceInterest"
                    name="provinceInterest"
                    value={formData.provinceInterest}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="Ontario">Ontario</option>
                    <option value="British Columbia">British Columbia</option>
                    <option value="Alberta">Alberta</option>
                    <option value="Manitoba">Manitoba</option>
                    <option value="Saskatchewan">Saskatchewan</option>
                    <option value="Nova Scotia">Nova Scotia</option>
                    <option value="New Brunswick">New Brunswick</option>
                    <option value="Prince Edward Island">Prince Edward Island</option>
                    <option value="Yukon">Yukon</option>
                    <option value="Northwest Territories">Northwest Territories</option>
                  </select>
                </div>

                <div className="form-group">
                  <label className="required-field">
                    Do you have any Canadian relatives that are permanent residents or citizens? (siblings, parents, grandparents)
                  </label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="relativesYes"
                      name="canadianRelatives"
                      value="yes"
                      checked={formData.canadianRelatives === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="relativesYes">Yes</label>

                    <input
                      type="radio"
                      id="relativesNo"
                      name="canadianRelatives"
                      value="no"
                      checked={formData.canadianRelatives === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="relativesNo">No</label>
                  </div>
                </div>

                {formData.canadianRelatives === 'yes' && (
                  <div className="form-group" id="relativeDetails">
                    <label htmlFor="relativeRelationship" className="required-field">
                      If yes, specify relationship:
                    </label>
                    <select
                      id="relativeRelationship"
                      name="relativeRelationship"
                      value={formData.relativeRelationship}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select...</option>
                      <option value="sibling">Sibling</option>
                      <option value="parent">Parent</option>
                      <option value="grandparent">Grandparent</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                )}
                <div className="form-group">
                  <label className="required-field">Have you received an ITA for permanent residence?</label>
                  <div className="pill-radio-group">
                    <input
                      type="radio"
                      id="itaYes"
                      name="receivedITA"
                      value="yes"
                      checked={formData.receivedITA === 'yes'}
                      onChange={handleInputChange}
                      required
                    />
                    <label htmlFor="itaYes">Yes</label>

                    <input
                      type="radio"
                      id="itaNo"
                      name="receivedITA"
                      value="no"
                      checked={formData.receivedITA === 'no'}
                      onChange={handleInputChange}
                    />
                    <label htmlFor="itaNo">No</label>
                  </div>
                </div>
              </div>
            </div>

            {/* ADDITIONAL INFORMATION SECTION */}
            <div className="collapsible-section">
              <button
                type="button"
                className={`section-header ${openSections['additional'] ? 'active' : ''}`}
                onClick={() => toggleSection('additional')}
              >
                Additional Information <span className="chevron">{openSections['additional'] ? '▲' : '▼'}</span>
              </button>

              <div className="section-content" style={{ display: openSections['additional'] ? 'block' : 'none' }}>
                <div className="form-group">
                  <label htmlFor="settlementFunds" className="required-field">Settlement Funds (in CAD):</label>
                  <input
                    type="number"
                    id="settlementFunds"
                    name="settlementFunds"
                    placeholder="Enter amount"
                    value={formData.settlementFunds}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="preferredCity" className="required-field">Preferred City:</label>
                  <select
                    id="preferredCity"
                    name="preferredCity"
                    value={formData.preferredCity}
                    onChange={handleInputChange}
                  >
                    {renderCityOptions()}
                  </select>
                </div>
                <div className="form-group">
                  <label htmlFor="preferredDestination" className="required-field">Preferred Destination (Province):</label>
                  <select
                    id="preferredDestination"
                    name="preferredDestination"
                    value={formData.preferredDestination}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select...</option>
                    <option value="Ontario">Ontario</option>
                    <option value="British Columbia">British Columbia</option>
                    <option value="Alberta">Alberta</option>
                    <option value="Manitoba">Manitoba</option>
                    <option value="Saskatchewan">Saskatchewan</option>
                    <option value="Nova Scotia">Nova Scotia</option>
                    <option value="New Brunswick">New Brunswick</option>
                    <option value="Prince Edward Island">Prince Edward Island</option>
                    <option value="Yukon">Yukon</option>
                    <option value="Northwest Territories">Northwest Territories</option>
                  </select>
                </div>
              </div>
            </div>

            {/* SUBMIT BUTTON */}
            <div className="submit-container">
              {formErrors.length > 0 && (
                <div id="form-error-display" className="error-display">
                  <h3>Please correct the following errors:</h3>
                  <ul>
                    {formErrors.map((error, idx) => (
                      <li key={idx}>{error}</li>
                    ))}
                  </ul>
                </div>
              )}

              <button
                type="submit"
                className="btn-primary"
                disabled={formSubmitting}
              >
                {formSubmitting ? 'Submitting...' : 'Calculate Eligibility'}
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default FormPage; 